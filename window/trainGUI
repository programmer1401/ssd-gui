import os
import tkinter as tk
import tkinter.messagebox
import tkinter.filedialog

from PIL import Image

from gui.trainData import TrainData
from gui.tuningGUI.batchSizeGUI import batchSizeGUI
from gui.tuningGUI.learningRateGUI import learningRateGUI
from gui.utils import CreateCanvas

ERROR_TITLE = ["输入错误！", "运行错误！"]
INFO_TITLE = ["状态信息", "提示"]


class TrainWin:
    def __init__(self, window):
        self.window = window
        # self.window = tk.Tk()
        # self.window.title("ssd 可视化")
        # self.window.geometry("1000x618")

        # 标志位，用来控制是否弹出“提醒图片另存为”对话框
        # 0:程序没有执行过，不需要弹出
        # 1：程序执行过，需要弹出
        self.finish = 0
        self.loss_ass = []

        # 标题
        tk.Label(self.window, text="基于PyTorch的目标检测—数据训练", font=("STSONG", 23, "bold")).place(x=270, y=20)
        tk.Label(self.window, text="参数设置", font=("STSONG", 17, "bold")).place(x=200, y=80)
        tk.Label(self.window, text="图像显示", font=("STSONG", 17, "bold")).place(x=690, y=80)

        # 输入
        tk.Label(self.window, text="主干网络：", font=("STSONG", 14)).place(x=90, y=170)
        tk.Label(self.window, text="迭代次数：", font=("STSONG", 14)).place(x=90, y=220)
        tk.Label(self.window, text="批处理大小：", font=("STSONG", 14)).place(x=90, y=270)
        tk.Label(self.window, text="是否使用cuda：", font=("STSONG", 14)).place(x=90, y=320)
        tk.Label(self.window, text="学习率：", font=("STSONG", 14)).place(x=90, y=370)

        basenet = tk.IntVar()
        basenet.set(1)
        tk.Radiobutton(self.window, text="VGG", value=1, variable=basenet, font=("STSONG", 14)).place(x=220, y=165)
        tk.Radiobutton(self.window, text="ResNet", value=2, variable=basenet, font=("STSONG", 14)).place(x=300, y=165)

        input_iter_num = tk.Entry(self.window, textvariable=tk.StringVar(value="10"), width=23, font=("STSONG", 12))
        input_iter_num.place(x=220, y=220)
        input_batch_size = tk.Entry(self.window, textvariable=tk.StringVar(value="4"), width=23, font=("STSONG", 12))
        input_batch_size.place(x=220, y=270)

        cuda = tk.IntVar()
        cuda.set(2)
        tk.Radiobutton(self.window, text="是", value=1, variable=cuda, font=("STSONG", 14)).place(x=220, y=320)
        tk.Radiobutton(self.window, text="否", value=2, variable=cuda, font=("STSONG", 14)).place(x=270, y=320)

        input_learning_rate = tk.Entry(self.window, textvariable=tk.StringVar(value="0.003"), width=23,
                                       font=("STSONG", 12))
        input_learning_rate.place(x=220, y=370)

        # 绘制 损失函数曲线
        self.matplot = CreateCanvas(self.window)
        self.canvas = self.matplot.get_canvas()
        self.figure = self.matplot.get_figure()

        # 按钮
        self.btn_start = tk.Button(self.window, text="开始", height="1", width="15",
                                   command=lambda: self.train_start(basenet.get(),
                                                                    input_iter_num.get(),
                                                                    input_batch_size.get(),
                                                                    input_learning_rate.get(),
                                                                    cuda.get())).place(x=290, y=450)

        # self.btn_img_save = tk.Button(self.window, text="另存为", height="1", width="15",
        #                               command=self.img_save).place(x=290, y=450)

        # 帮助按钮
        self.help_pr_btn = tk.Button(self.window, text="?",
                                     command=lambda: self.tuning_batch_size())
        self.help_pr_btn.place(x=420, y=265)

        self.help_pr_btn = tk.Button(self.window, text="?",
                                     command=lambda: self.tuning_learning_rate())
        self.help_pr_btn.place(x=420, y=365)

        # self.window.mainloop()

    def train_start(self, basenet, iter_num, batch_size, learning_rate, cuda):

        if self.finish == 1:
            is_save = tk.messagebox.askokcancel(INFO_TITLE[1], "请确认是否已经将损失函数图像另存为？")
            if not is_save:
                return

        cuda = True if cuda == 1 else False

        if basenet == 1:
            basenet = "vgg16_reducedfc.pth"
        else:
            tk.messagebox.showerror(title=ERROR_TITLE[1], message="功能尚未开发，无法使用！")
            return

        if len(iter_num) != 0 and len(batch_size) != 0 and len(learning_rate) != 0:

            traindata = TrainData(int(iter_num), basenet=basenet, batch_size=int(batch_size), cuda=cuda,
                                  lr=float(learning_rate))
            self.loss_ass = traindata.train()

            tk.messagebox.showinfo(title=INFO_TITLE[0], message="程序执行成功！")
            self.create_matplotlib()

        else:
            tk.messagebox.showerror(title=ERROR_TITLE[0], message="参数不能为空！")

    def create_matplotlib(self):
        axc = self.figure.add_subplot(111)

        axc.plot(range(len(self.loss_ass)), self.loss_ass)
        axc.set_title("损失函数与迭代次数曲线", loc='center', pad=20, fontsize='xx-large', color='red')
        axc.set_xlabel("迭代次数")
        axc.set_ylabel("损失函数")

        self.canvas.draw()

    # def img_save(self):
    #     file_name = tk.filedialog.asksaveasfilename(title="图片另存为" ,filetypes=[("PNG", ".png")])
    #
    #     if file_name!="":
    #         image = Image.open(self.show_loss_path)
    #         image.save(str(file_name) + ".png")
    #         tk.messagebox.showinfo(title=INFO_TITLE[0], message="图片另存为成功！")

    def tuning_batch_size(self):
        self.tuning_batch_size_win = tk.Toplevel()
        batchSizeGUI(self.tuning_batch_size_win)

    def tuning_learning_rate(self):
        self.tuning_learning_rate_win = tk.Toplevel()
        learningRateGUI(self.tuning_learning_rate_win)


if __name__ == "__main__":
    TrainWin()
